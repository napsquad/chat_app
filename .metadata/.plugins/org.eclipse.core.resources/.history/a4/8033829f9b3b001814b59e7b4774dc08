import java.io.*;
import java.net.*;
import java.util.*;
import Message_Objs.*;

public class Client1 implements Runnable, Serializable
{
	//globals
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -4220256892269154006L; // serialized for sending
	
	public static Socket SOCK; // makes the socket persist, global makes sure socket doesn't delete itself
	public ObjectInputStream INPUT; // defined for later use in order to read objects
	public static ObjectOutputStream OUT; // defined for later use in thread for sending Objects
	
	Scanner SEND = new Scanner(System.in); // just used to set username in window
	
	public Client1(Socket X) throws IOException
	{
		Client1.SOCK = X;// constructs socket for the client
		INPUT = new ObjectInputStream(X.getInputStream());
		OUT = new ObjectOutputStream(X.getOutputStream());
	}
	public void run()
	{
				System.out.println("before out");
				System.out.println("after def");
				
				try {
					OUT.flush();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} //sends data on its way
				
				
				Connect_Object addme = new Connect_Object(true, GUI.Usr, "password", SOCK, GUI.Usr); // say that we are connecting, as Usr with the right SOCK
				System.out.println("before conn flush " + addme.name);
				try {
					OUT.writeObject(addme);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} // put object in buffer to later send it
				try {
					OUT.flush();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} // send it
				
				try {
					CheckStream();
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} // always checks for new input from users
		
		
		
	}
	
	
	public void CheckStream() throws ClassNotFoundException, IOException
	{
		while(true)
		{
			RECIEVE();
		}
	}
	
	
	public void RECIEVE() throws ClassNotFoundException, IOException
	{
		if(INPUT.readObject() != null)
		{

			if( INPUT.readObject() instanceof Message_obj) // checks if object is a message
			{
				
				Message_obj message = (Message_obj) INPUT.readObject(); //  cast as a message object
				
				if(message.get_bool() == true) //is it trade data?
				{
				GUI.TA_CONVERSATION.append(message.get_contents()); // yes, print to trade window
				}
				else 
				{
					GUI.TRADE_POST_AREA.append(message.get_contents()); // no, its a conversation
				}
				
			}
			else if(INPUT.readObject() instanceof Search_obj) // checks if object is a search request
			{
				Search_obj search = (Search_obj) INPUT.readObject();
				GUI.TA_CONVERSATION.append("got search packet from" + search.name);
			}
			else if(INPUT.readObject() instanceof data_object) // checks if object is a trade input
			{
				data_object trayd = (data_object) INPUT.readObject();
				GUI.TA_CONVERSATION.append("request for" + trayd.Have_Obj);
			}
			else if(INPUT.readObject() instanceof Generic_Object) // checks if object is a generic obj
			{
				Generic_Object genny = (Generic_Object) INPUT.readObject();
				GUI.TA_CONVERSATION.append("i guess " + genny.name + " wants to talk" );
			}
			else if(INPUT.readObject() instanceof Connect_Object)
			{
				Connect_Object DeeCee = (Connect_Object) INPUT.readObject();
				GUI.TA_CONVERSATION.append("someones trying to connect:  " + DeeCee.name + " , wonder what they want" );
			}

		}
		
	}
	
	
	public void DISCONNECT() throws IOException
	{
		/*OUT.println(GUI.Usr + " Has Disconnected."); // broadcast who disconnected
		OUT.flush(); // flush output stream, sends data on its way
		SOCK.close(); // close socket
		JOptionPane.showMessageDialog(null, "you Disconncted"); // tell user they have disconnected
		System.exit(0);
		*/
		ObjectOutputStream KillMe = new ObjectOutputStream(SOCK.getOutputStream());
		Connect_Object DC  = new Connect_Object(false, GUI.Usr, "password", SOCK, " ");
		KillMe.writeObject(DC);
		KillMe.flush();
		System.out.println("should not be null : " + OUT);
		SOCK.close();
		System.exit(0);
		
		
	}
	
	
	public static void SEND (Message_obj x) throws IOException
	{
		ObjectOutputStream Msg_Out = new ObjectOutputStream(SOCK.getOutputStream()); // redefine temp socket whenever called
		
		System.out.println("before out " + x.get_contents()); // making sure the object has the proper fields
		System.out.println("shouldnt be null: " + Msg_Out); // making sure the stream isnt null
		
		Msg_Out.writeObject(x); // write our object out
		Msg_Out.flush(); // send the object to the server
		
		GUI.TF_MESSAGE.setText(""); // sets text field to null after send
	}
	
	
}
